Open Source Software (OSS; разг. опенсорс) — это программное обеспечение (ПО),
код которого открыт (его можно посмотреть), и на него почти всегда можно влиять.

Мы как программисты каждый день пользуемся программным обеспечением с открытым
исходным кодом. К такому ПО относится как прикладное, например, VSCode или Git,
так и огромное число библиотек в нашем коде, а также практически все современные
языки программирования. Та скорость, с которой могут разрабатываться современные
проекты, во многом возможна как раз благодаря программам и библиотекам с открытым
исходным кодом.

Linux (> 12 миллионов строк кода)
Chromium (> 16 000 000)
Git
jQuery

Откуда вообще берутся опенсорс-проекты и почему они так популярны? Почти всегда такой
код появляется как побочный продукт разработки других проектов. Например, в процессе
разработки Linux появилась необходимость в удобной программе для управления версиями.
Так появился Git. Но почему его код был открыт? Ответ достаточно простой.
Удачные проекты привлекают множество разработчиков, которые помогают им развиваться.
Они пишут отчёты об ошибках, присылают исправления и даже становятся полноправными
разработчиками. И всё это бесплатно. Разработчики удовлетворяют своё эго, радуются
тому, что создают нечто новое и вообще помогают этой вселенной. Как побочный эффект,
такие разработчики гораздо легче находят работу и, в целом, имеют более прокачанные
навыки кодирования, чем те, кто не работает с открытыми проектами.

Если вы вернетесь в прошлое и посмотрите, сколько опенсорс-проектов создавалось тогда
и сколько там было задействовано людей, то вы увидите огромный разрыв с современным
положением дел. Сложный процесс включения в разработку, сложный процесс принятия
изменений — вот неполный перечень проблем, ожидавших тех, кто желал стать участником
этого движения. Люди выступали с докладами на конференциях, где час (Карл!!!) описывали
правила принятия людей и кода от них в проект.

Сейчас начать делать опенсорс стало делом пары минут, а чтобы начать где-то участвовать,
не нужно прилагать практически никаких усилий. А случилось это благодаря двум
оставляющим: Git и GitHub.

Один из важнейших механизмов GitHub — запрос на включение изменений
(pull request; разг. пулреквест). Именно он позволяет легко и непринуждённо
вливаться в разработку любых проектов. Допустим, работая с определённой библиотекой,
мы заметили ошибку в коде или документации.

Пройдёмся по шагам, которые необходимо выполнить для исправления этой ошибки.
Наша конечная цель в том, чтобы разработчики библиотеки приняли наш код.

Клонирование
Первым шагом необходимо создать копию (клон) репозитория в своём аккаунте.
Делается это буквально одной кнопкой «Fork» на странице репозитория.

Кнопка Fork - см. ../images/fork.jpg

После этого действия в вашем аккаунте окажется репозиторий с таким же именем.
GitHub знает, что это копия оригинального репозитория, и помечает его особым образом.
Дальше всё как обычно. Мы клонируем репозиторий на компьютер и производим необходимые
изменения. Хорошей практикой считается делать изменения в отдельной ветке
(обычно созданной от ветки main).

Запрос на включение изменений кода
После того, как изменения залиты на GitHub, в его интерфейсе произойдут изменения.
На странице склонированного репозитория появится кнопка «pull request».

Кнопка Pull request: см: ../images/pull_request.jpg

Если её нажать, то откроется страница, на которой можно указать название пулреквеста и его
описание. После отправки пулреквеста в исходном (оригинальном) репозитории на странице
«Pull requests» отобразится ваш запрос. Теперь остаётся ждать, когда разработчики
библиотеки либо его примут, либо отклонят, либо зададут уточняющие вопросы
(тогда с пулреквестом, возможно, потребуется ещё поработать).

Исправления прямо на Гитхабе
В более простых ситуациях, когда достаточно исправить текст или опечатку, Github позволяет
делать пулреквест прямо из своего интерфейса. Для этого достаточно открыть любой файл
проекта и нажать на иконку редактирования. После завершения редактирования Github сам
предложит создать пулреквест с этим изменением.

